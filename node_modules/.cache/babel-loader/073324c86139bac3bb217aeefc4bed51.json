{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, GET_POSTS, GET_POST, POST_LOADING, CLEAR_ERRORS, GET_USER_POSTS, CLEAR_POST, CLEAR_POSTS } from \"./types\"; //Add post\n\nexport const addPost = (postData, history) => dispatch => {\n  axios.post(\"/api/posts\", postData).then(res => {\n    window.alert(\"Post successfully submitted\");\n    history.push(\"/profile\");\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Get Posts\n\nexport const getPosts = () => dispatch => {\n  dispatch(setPostLoading());\n  axios.get('/api/posts').then(res => dispatch({\n    type: GET_POSTS,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_POSTS,\n    payload: null\n  }));\n}; //Get post by id\n\nexport const getPost = (postId, history) => dispatch => {\n  dispatch(clearPost());\n  dispatch(setPostLoading());\n  axios.get(`/api/posts/${postId}`).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  }).catch(err => {\n    history.push(\"/not-found\");\n  });\n}; //Get post by id\n\nexport const refreshPost = postId => dispatch => {\n  axios.get(`/api/posts/${postId}`).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  }).catch(err => {\n    // history.push(\"/not-found\")\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //Delete post\n\nexport const deletePost = (postId, history) => dispatch => {\n  axios.delete(`/api/posts/${postId}`).then(res => {\n    // console.log(res.data);\n    history.push(\"/profile\");\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //Add comment\n\nexport const addComment = (commentInput, postId) => dispatch => {\n  dispatch(setPostLoading());\n  dispatch(clearErrors());\n  axios.post(`/api/posts/comment/${postId}`, commentInput).then(res => {\n    console.log(res.data); // dispatch({\n    //   type: GET_POST,\n    //   payload: res.data\n    // })\n\n    dispatch(refreshPost(postId));\n  }).catch(err => {\n    // console.log(err.response.data);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Add comment in postfeed\n//Add comment\n\nexport const addCommentPosts = (commentInput, postId) => dispatch => {\n  axios.post(`/api/posts/comment/${postId}`, commentInput).then(res => dispatch(refreshGetFollowingPosts())).catch(err => {\n    // console.log(err.response.data);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //Delete comment\n\nexport const deleteComment = (postId, commentId) => dispatch => {\n  axios.delete(`/api/posts/comment/${postId}/${commentId}`).then(res => {\n    // console.log(res.data);\n    // dispatch({\n    //   type: GET_POST,\n    //   payload: res.data\n    // })\n    dispatch(refreshPost(postId));\n  }).catch(err => {\n    // console.log(err.response.data);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //Get all posts of current user\n\nexport const getUserPosts = () => dispatch => {\n  dispatch(setPostLoading());\n  axios.get(\"api/posts/currentUser\").then(res => {\n    // console.log(res);\n    dispatch({\n      type: GET_USER_POSTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //Get all posts of another user by their handle\n\nexport const getOtherUsersPosts = handle => dispatch => {\n  console.log(\"posts by handle\");\n  dispatch(setPostLoading());\n  axios.get(`/api/posts/otheruserposts/${handle}`).then(res => {\n    // console.log(res);\n    dispatch({\n      type: GET_USER_POSTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Set loading state\n\nexport const setPostLoading = () => {\n  return {\n    type: POST_LOADING\n  };\n}; // Like a post \n\nexport const addLike = postId => dispatch => {\n  axios.post(`/api/posts/like/${postId}`).then(res => {\n    //  dispatch({\n    //    type: GET_POST,\n    //    payload: res.data,\n    //  });\n    dispatch(refreshPost(postId));\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // UnLike a post \n\nexport const removeLike = postId => dispatch => {\n  axios.post(`/api/posts/unlike/${postId}`).then(res => {\n    // dispatch({\n    //   type: GET_POST,\n    //   payload: res.data,\n    // });\n    dispatch(refreshPost(postId));\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Get all posts except current user's\n\nexport const allPostsExceptCurrentUsers = () => dispatch => {\n  dispatch(clearPosts());\n  dispatch(setPostLoading());\n  axios.get(`/api/posts/selected`).then(res => {\n    // console.log(res);\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Get all posts from following list\n\nexport const getFollowingPosts = () => dispatch => {\n  dispatch(clearPosts());\n  dispatch(setPostLoading());\n  axios.get(`/api/posts/following`).then(res => {\n    // console.log(res.data);\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Get all posts from following list without clearPost or setLoading\n// the reason we need 2 actions are similar: getFollowingPosts and refreshPosts are --- getFollowingPosts are used when we move from other page to Home page -- the posts list in Redux store need to be clear\n\nexport const refreshGetFollowingPosts = () => dispatch => {\n  axios.get(`/api/posts/following`).then(res => {\n    // console.log(res.data);\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Like a post in PostFeed\n\nexport const addLikePosts = postId => dispatch => {\n  axios.post(`/api/posts/like/${postId}`).then(res => dispatch(refreshGetFollowingPosts())).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // UnLike a post in PostFeed\n\nexport const removeLikePosts = postId => dispatch => {\n  axios.post(`/api/posts/unlike/${postId}`).then(res => dispatch(refreshGetFollowingPosts())).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // save posts in PostFeed\n\nexport const savePosts = postId => dispatch => {\n  axios.post(`/api/posts/save/${postId}`).then(res => dispatch(refreshGetFollowingPosts())).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Unsave a post in PostFeed\n\nexport const unsavePosts = postId => dispatch => {\n  axios.post(`/api/posts/unsave/${postId}`).then(res => dispatch(refreshGetFollowingPosts())).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // save post\n\nexport const savePost = postId => dispatch => {\n  axios.post(`/api/posts/save/${postId}`).then(res => {\n    dispatch(refreshPost(postId));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Unsave post\n\nexport const unsavePost = postId => dispatch => {\n  axios.post(`/api/posts/unsave/${postId}`).then(res => {\n    // dispatch({\n    //   type: GET_POST,\n    //   payload: res.data,\n    // });\n    dispatch(refreshPost(postId));\n  }).catch(err => {\n    // console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};\nexport const clearPost = () => {\n  return {\n    type: CLEAR_POST\n  };\n};\nexport const clearPosts = () => {\n  return {\n    type: CLEAR_POSTS\n  };\n};","map":{"version":3,"sources":["D:/MERN-PROJECT-INSTA/MERN_InstaApp/client/src/actions/postActions.js"],"names":["axios","GET_ERRORS","GET_POSTS","GET_POST","POST_LOADING","CLEAR_ERRORS","GET_USER_POSTS","CLEAR_POST","CLEAR_POSTS","addPost","postData","history","dispatch","post","then","res","window","alert","push","catch","err","type","payload","response","data","getPosts","setPostLoading","get","getPost","postId","clearPost","console","log","refreshPost","deletePost","delete","addComment","commentInput","clearErrors","addCommentPosts","refreshGetFollowingPosts","deleteComment","commentId","getUserPosts","getOtherUsersPosts","handle","addLike","removeLike","allPostsExceptCurrentUsers","clearPosts","getFollowingPosts","addLikePosts","removeLikePosts","savePosts","unsavePosts","savePost","unsavePost"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { GET_ERRORS, GET_POSTS, GET_POST, POST_LOADING, CLEAR_ERRORS, GET_USER_POSTS, CLEAR_POST, CLEAR_POSTS } from \"./types\";\r\n\r\n\r\n//Add post\r\nexport const addPost = (postData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/posts\", postData)\r\n    .then(res => {\r\n      window.alert(\"Post successfully submitted\")\r\n      history.push(\"/profile\")})\r\n    .catch(err => \r\n      dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    }))\r\n};\r\n\r\n// Get Posts\r\nexport const getPosts = () => dispatch => {\r\n  dispatch(setPostLoading());\r\n  axios\r\n    .get('/api/posts')\r\n    .then(res =>\r\n      dispatch({\r\n        type: GET_POSTS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_POSTS,\r\n        payload: null\r\n      })\r\n    );\r\n};\r\n\r\n//Get post by id\r\nexport const getPost = (postId, history) => dispatch => {\r\n  dispatch(clearPost());\r\n  dispatch(setPostLoading());\r\n  axios\r\n    .get(`/api/posts/${postId}`)\r\n    .then(res => {\r\n      console.log(res.data);\r\n      dispatch({\r\n      type: GET_POST,\r\n      payload: res.data\r\n    })})\r\n    .catch(err => {\r\n      history.push(\"/not-found\")\r\n    })\r\n};\r\n\r\n//Get post by id\r\nexport const refreshPost = (postId) => dispatch => {\r\n  axios\r\n    .get(`/api/posts/${postId}`)\r\n    .then(res => {\r\n      console.log(res.data);\r\n      dispatch({\r\n      type: GET_POST,\r\n      payload: res.data\r\n    })})\r\n    .catch(err => {\r\n      // history.push(\"/not-found\")\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    })\r\n};\r\n\r\n//Delete post\r\nexport const deletePost = (postId, history) => dispatch => {\r\n  axios\r\n    .delete(`/api/posts/${postId}`)\r\n    .then(res => {\r\n      // console.log(res.data);\r\n      history.push(\"/profile\")})\r\n    .catch(err => {\r\n      // console.log(err);\r\n      dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    })\r\n  })\r\n}\r\n\r\n//Add comment\r\nexport const addComment = (commentInput, postId) => dispatch => {\r\n  dispatch(setPostLoading());\r\n  dispatch(clearErrors());\r\n  axios\r\n    .post(`/api/posts/comment/${postId}`, commentInput)\r\n    .then(res => {\r\n       console.log(res.data);\r\n      // dispatch({\r\n      //   type: GET_POST,\r\n      //   payload: res.data\r\n      // })\r\n      dispatch(refreshPost(postId));\r\n    })\r\n    .catch(err => {\r\n      // console.log(err.response.data);\r\n      dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    })})\r\n}\r\n// Add comment in postfeed\r\n//Add comment\r\nexport const addCommentPosts = (commentInput, postId) => dispatch => {\r\n  axios\r\n    .post(`/api/posts/comment/${postId}`, commentInput)\r\n    .then((res) => dispatch(refreshGetFollowingPosts()))\r\n    .catch((err) => {\r\n      // console.log(err.response.data);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n}\r\n\r\n//Delete comment\r\nexport const deleteComment = (postId, commentId) => dispatch => {\r\n  axios\r\n    .delete(`/api/posts/comment/${postId}/${commentId}`)\r\n    .then(res => {\r\n      // console.log(res.data);\r\n      // dispatch({\r\n      //   type: GET_POST,\r\n      //   payload: res.data\r\n      // })\r\n      dispatch(refreshPost(postId));\r\n    })\r\n    .catch(err => {\r\n      // console.log(err.response.data);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      });\r\n    })\r\n}\r\n//Get all posts of current user\r\nexport const getUserPosts = () => dispatch => {\r\n  dispatch(setPostLoading());\r\naxios\r\n  .get(\"api/posts/currentUser\")\r\n  .then((res) => {\r\n    // console.log(res);\r\n    dispatch({\r\n      type: GET_USER_POSTS,\r\n      payload: res.data,\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    // console.log(err);\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  });\r\n}\r\n//Get all posts of another user by their handle\r\nexport const getOtherUsersPosts = (handle) => dispatch => {\r\n  console.log(\"posts by handle\")\r\n  dispatch(setPostLoading());\r\naxios\r\n  .get(`/api/posts/otheruserposts/${handle}`)\r\n  .then((res) => {\r\n    // console.log(res);\r\n    dispatch({\r\n      type: GET_USER_POSTS,\r\n      payload: res.data,\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    // console.log(err);\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  });\r\n}\r\n\r\n// Set loading state\r\nexport const setPostLoading = () => {\r\n  return {\r\n    type: POST_LOADING\r\n  };\r\n};\r\n// Like a post \r\nexport const addLike = (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/like/${postId}`)\r\n    .then((res) => {\r\n    //  dispatch({\r\n    //    type: GET_POST,\r\n    //    payload: res.data,\r\n    //  });\r\n    dispatch(refreshPost(postId));\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n// UnLike a post \r\nexport const removeLike = (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/unlike/${postId}`)\r\n    .then((res) => {\r\n      // dispatch({\r\n      //   type: GET_POST,\r\n      //   payload: res.data,\r\n      // });\r\n      dispatch(refreshPost(postId));\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n// Get all posts except current user's\r\nexport const allPostsExceptCurrentUsers = () => (dispatch) => {\r\n  dispatch(clearPosts());\r\n  dispatch(setPostLoading());\r\n  axios\r\n    .get(`/api/posts/selected`)\r\n    .then((res) => {\r\n      // console.log(res);\r\n      dispatch({\r\n        type: GET_POSTS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n// Get all posts from following list\r\nexport const getFollowingPosts = () => (dispatch) => {\r\n  dispatch(clearPosts());\r\n  dispatch(setPostLoading());\r\n  axios\r\n    .get(`/api/posts/following`)\r\n    .then((res) => {\r\n      // console.log(res.data);\r\n      dispatch({\r\n        type: GET_POSTS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n// Get all posts from following list without clearPost or setLoading\r\n// the reason we need 2 actions are similar: getFollowingPosts and refreshPosts are --- getFollowingPosts are used when we move from other page to Home page -- the posts list in Redux store need to be clear\r\n\r\nexport const refreshGetFollowingPosts = () => (dispatch) => {\r\n\r\n  axios\r\n    .get(`/api/posts/following`)\r\n    .then((res) => {\r\n      // console.log(res.data);\r\n      dispatch({\r\n        type: GET_POSTS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n// Like a post in PostFeed\r\nexport const addLikePosts = (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/like/${postId}`)\r\n    .then((res) => dispatch(refreshGetFollowingPosts()))\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n// UnLike a post in PostFeed\r\nexport const removeLikePosts = (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/unlike/${postId}`)\r\n    .then((res) => dispatch(refreshGetFollowingPosts()))\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n// save posts in PostFeed\r\nexport const savePosts= (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/save/${postId}`)\r\n    .then((res) => dispatch(refreshGetFollowingPosts()))\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    ); \r\n    \r\n};\r\n\r\n// Unsave a post in PostFeed\r\nexport const unsavePosts = (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/unsave/${postId}`)\r\n    .then((res) => dispatch(refreshGetFollowingPosts()))\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n// save post\r\nexport const savePost = (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/save/${postId}`)\r\n    .then((res) => {\r\n      dispatch(refreshPost(postId));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n\r\n};\r\n\r\n// Unsave post\r\n\r\nexport const unsavePost = (postId) => (dispatch) => {\r\n  axios\r\n    .post(`/api/posts/unsave/${postId}`)\r\n    .then((res) => {\r\n      // dispatch({\r\n      //   type: GET_POST,\r\n      //   payload: res.data,\r\n      // });\r\n      dispatch(refreshPost(postId));\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n}; \r\n// Clear errors\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS\r\n  };\r\n};\r\n\r\nexport const clearPost = () => {\r\n  return {\r\n    type: CLEAR_POST\r\n  }\r\n}\r\n\r\nexport const clearPosts = () => {\r\n  return {\r\n    type: CLEAR_POSTS\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}